generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SkillType {
  LANGUAGE
  FRAMEWORK
  DATABASE
  DESIGNER_TOOL
  CLOUD_SERVICE
  DEVOPS_TOOL
  TESTING_TOOL
}

model CandidateUser {
  id                       Int       @id @default(autoincrement())
  name                     String
  email                    String    @unique
  password                 String?
  roles                    String?
  provider                 String?
  providerId               String?   @map("provider_id")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @map("updated_at")
  recoverToken             String?   @map("recover_token")
  recoverTokenExpiresAt    DateTime? @map("recover_token_expires_at")
  confirmationToken        String?   @map("confirmation_token")
  expiredConfirmationToken DateTime? @map("expired_confirmation_token")
  activated                Boolean   @default(false)
  completeSurvey           Boolean?  @default(false) @map("complete_survey")

  CandidateProfile            CandidateProfile?
  CandidateUserDetails        CandidateUserDetails?
  SurveyMarketInformation     SurveyMarketInformation?
  SurveyFeelings              SurveyFeelings?
  SurveyNeeds                 SurveyNeeds?
  SurveyProfessionalSituation SurveyProfessionalSituation?

  CandidateProject CandidateProject[]

  @@map("tb_candidate_users")
}

model CandidateProfile {
  id              Int              @id @default(autoincrement())
  description     String
  urlGithub       String?          @map("url_github")
  urlLinkedin     String           @map("url_linkedin")
  phone           String
  availableTime   String           @map("available_time")
  areaOfInterest  String           @map("area_of_interest")
  candidateUserId Int?             @unique
  candidateUser   CandidateUser?   @relation(fields: [candidateUserId], references: [id])
  occupationArea  OccupationArea[]
  Skill           Skill[]

  @@map("tb_candidate-profile")
}

model OccupationArea {
  id               Int               @id @default(autoincrement())
  title            String?
  profileId        Int?              @map("profile_id")
  CandidateProfile CandidateProfile? @relation(fields: [profileId], references: [id])

  @@map("tb_occupation_area")
}

model Skill {
  id                 Int               @id @default(autoincrement())
  type               SkillType
  name               String
  candidateProfileId Int?              @map("candidate_profile_id")
  candidateProfile   CandidateProfile? @relation(fields: [candidateProfileId], references: [id])

  @@map("tb_skill")
}

model CandidateProject {
  id                  Int       @id @default(autoincrement())
  projectName         String    @unique @map("project_name")
  shortDescription    String    @map("short_description")
  detailedDescription String    @map("detailed_description")
  startDate           DateTime  @map("start_date")
  expectedDuration    String    @map("expected_duration")
  commitmentTime      String    @map("commitment_time") // tempo de dedicação ao projeco pelo candidato
  teamSize            String?   @map("team_size")
  projectTheme        String    @map("project_theme")
  responsible         String?
  responsibleEmail    String?   @map("responsible_email")
  urlTeamSelection    String?   @map("url_team_selection")
  isActive            Boolean?  @default(false) @map("is_active")
  candidateUserId     Int?      @map("candidate_user_id")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @map("updated_at")

  CandidateUser        CandidateUser?         @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)
  ProgrammingLanguages ProgrammingLanguages[]
  FrameworksLibraries  FrameworksLibraries[]
  DataBases            DataBases[]
  DesignerTools        DesignerTools[]
  CloudServices        CloudServices[]
  DevOpsTools          DevOpsTools[]
  TestingTools         TestingTools[]

  DeveloperRoles DevelperRoles[]
  ProductRoles   ProductRoles[]
  DesignerRoles  DesignerRoles[]
  DataRoles      DataRoles[]
  AgileRoles     AgileRoles[]
  QARoles        QARoles[]

  @@map("tb_candidate_projects")
}

// as tabelas abaixo são para a linguagens e ferramentas utilizadas no projeto
model ProgrammingLanguages {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_programming_languages")
}

model FrameworksLibraries {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_frameworks_libraries")
}

model DataBases {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_data_bases")
}

model DesignerTools {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_designer_tools")
}

model CloudServices {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_cloud_services")
}

model DevOpsTools {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_dev_ops_tools")
}

model TestingTools {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_testing_tools")
}

// modelos da tabelas de cargos/funções dentro do projeto
model DevelperRoles {
  id                 Int               @id @default(autoincrement())
  title              String
  quantity           Int
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_develper_roles")
}

model ProductRoles {
  id                 Int               @id @default(autoincrement())
  title              String
  quantity           Int
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_product_roles")
}

model DesignerRoles {
  id                 Int               @id @default(autoincrement())
  title              String
  quantity           Int
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_designer_roles")
}

model DataRoles {
  id                 Int               @id @default(autoincrement())
  title              String
  quantity           Int
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_data_roles")
}

model AgileRoles {
  id                 Int               @id @default(autoincrement())
  title              String
  quantity           Int
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_agile_roles")
}

model QARoles {
  id                 Int               @id @default(autoincrement())
  title              String
  quantity           Int
  CandidateProject   CandidateProject? @relation(fields: [candidateProjectId], references: [id])
  candidateProjectId Int?

  @@map("tb_qa_roles")
}

// as tabelas abaixo são referentes a Survey
model CandidateUserDetails {
  id              Int       @id @default(autoincrement())
  candidateUserId Int?      @unique @map("candidate_user_id")
  gender          String
  birthDate       DateTime? @map("birth_date")
  residencePlace  String?   @map("residence_place")
  state           String?
  country         String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @map("updated_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)

  @@map("tb_candidate_users_details")
}

model SurveyMarketInformation {
  id              Int      @id @default(autoincrement())
  metFindy        String   @map("met_findy")
  candidateUserId Int?     @unique() @map("candidate_user_id")
  friendName      String?  @map("friend_name")
  friendEmail     String?  @map("friend_email")
  createdAt       DateTime @default(now()) @map("created_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id])

  @@map("survey_market_information")
}

model SurveyFeelings {
  id                      Int      @id @default(autoincrement())
  candidateUserId         Int?     @unique @map("candidate_user_id")
  professionalAchievement Int      @map("professional_achievement")
  motivation              String
  createdAt               DateTime @default(now()) @map("created_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)

  @@map("tb_survey_feelings")
}

model SurveyNeeds {
  id                    Int                     @id @default(autoincrement())
  candidateUserId       Int?                    @unique @map("candidate_user_id")
  createdAt             DateTime                @default(now()) @map("created_at")
  PrincipalDifficulties PrincipalDifficulties[]
  FindyHelp             FindyHelp[]
  CandidateUser         CandidateUser?          @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)

  @@map("tb_survey_needs")
}

model PrincipalDifficulties {
  id                    Int    @id @default(autoincrement())
  principalDifficulties String @map("principal_difficulties")
  surveyNeedsId         Int?

  SurveyNeeds SurveyNeeds? @relation(fields: [surveyNeedsId], references: [id])

  @@map("tb_principal_difficulties")
}

model FindyHelp {
  id            Int    @id @default(autoincrement())
  findyHelp     String @map("findy_help")
  surveyNeedsId Int?

  SurveyNeeds SurveyNeeds? @relation(fields: [surveyNeedsId], references: [id])

  @@map("tb_findy_help")
}

model SurveyProfessionalSituation {
  id              Int      @id @default(autoincrement())
  situation       String
  ocupationArea   String?  @map("ocuppation_area")
  objectives      String?
  candidateUserId Int?     @unique() @map("candidate_user_id")
  createdAt       DateTime @default(now()) @map("created_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id])

  @@map("survey_professional_situation")
}
