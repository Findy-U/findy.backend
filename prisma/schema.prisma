generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_DEV")
}

model CandidateUser {
  id                          Int                          @id @default(autoincrement())
  name                        String
  email                       String                       @unique
  password                    String?
  roles                       String?
  provider                    String?
  providerId                  String?                      @map("provider_id")
  createdAt                   DateTime                     @default(now()) @map("created_at")
  updatedAt                   DateTime?                    @map("updated_at")
  recoverToken                String?                      @map("recover_token")
  recoverTokenExpiresAt       DateTime?                    @map("recover_token_expires_at")
  confirmationToken           String?                      @map("confirmation_token")
  expiredConfirmationToken    DateTime?                    @map("expired_confirmation_token")
  activated                   Boolean                      @default(false)
  CandidateProfile            CandidateProfile?
  CandidateProject            CandidateProject[]
  CandidateUserDetails        CandidateUserDetails?
  SurveyMarketInformation     SurveyMarketInformation?
  SurveyFeelings              SurveyFeelings?
  SurveyProfessionalSituation SurveyProfessionalSituation?

  @@map("tb_candidate_users")
}

model CandidateUserDetails {
  id              Int       @id @default(autoincrement())
  candidateUserId Int?      @unique @map("candidate_user_id")
  gender          String
  birthDate       DateTime? @map("birth_date")
  residencePlace  String?   @map("residence_place")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @map("updated_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)

  @@map("tb_candidate_users_details")
}

model CandidateProfile {
  id              Int              @id @default(autoincrement())
  description     String
  urlGithub       String?          @map("url_github")
  urlLinkedin     String           @map("url_linkedin")
  phone           String
  availableTime   String           @map("available_time")
  areaOfInterest  String           @map("area_of_interest")
  candidateUserId Int?             @unique
  candidateUser   CandidateUser?   @relation(fields: [candidateUserId], references: [id])
  occupationArea  OccupationArea[]
  profileSkills   ProfileSkills[]
  // professionalExperience String           @map("professional_experience")

  @@map("tb_candidate-profile")
}

model OccupationArea {
  id               Int               @id @default(autoincrement())
  title            String?
  userId           Int?              @map("user_id")
  profileId        Int?
  CandidateProfile CandidateProfile? @relation(fields: [profileId], references: [id])

  @@map("tb_occupation_area")
}

model ProfileSkills {
  id               Int               @id @default(autoincrement())
  profileId        Int?              @map("profile_id")
  stackId          Int?              @map("stack_id")
  Skill            Stack?            @relation(fields: [stackId], references: [id], onDelete: Cascade)
  CandidateProfile CandidateProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("profile_skills")
}

model CandidateProject {
  id                    Int            @id @default(autoincrement())
  name                  String         @unique
  projectScope          String         @map("project_scope")
  urlTeamSelection      String         @map("url_team_selection")
  responsible           String?
  contactResponsible    String?        @map("contact_responsible")
  urlLinkediResponsible String?        @map("url_linkedin_responsible")
  candidateUserId       Int?           @map("candidate_user_id")
  findyHelp             String?        @map("findy_help")
  isActive              Boolean?       @default(false) @map("is_active")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime?      @map("updated_at")
  contactLeaders        String?        @map("contact_leaders")
  CandidateUser         CandidateUser? @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)
  professional          ProjectRoles[]
  language              ProjectStack[]

  @@map("tb_candidate_projects")
}

model ProjectStack {
  id               Int               @id @default(autoincrement())
  projectId        Int?              @map("project_id")
  stackId          Int?              @map("stack_id")
  Stack            Stack?            @relation(fields: [stackId], references: [id], onDelete: Cascade)
  CandidateProject CandidateProject? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tb_project_stack")
}

model ProjectRoles {
  id               Int               @id @default(autoincrement())
  projectId        Int?              @map("project_id")
  title            String?
  CandidateProject CandidateProject? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tb_project_roles")
}

model Stack {
  id            Int             @id @default(autoincrement())
  title         String
  tools         ProjectStack[]
  ProfileSkills ProfileSkills[]

  @@map("tb_stacks")
}

model Roles {
  id    Int    @id @default(autoincrement())
  title String

  @@map("tb_roles")
}

model Leader {
  id Int @id @default(autoincrement())

  @@map("tb_leaders")
}

model SurveyMarketInformation {
  id              Int      @id @default(autoincrement())
  metFindy        String   @map("met_findy")
  candidateUserId Int?     @unique() @map("candidate_user_id")
  friendName      String?  @map("friend_name")
  friendEmail     String?  @map("friend_email")
  createdAt       DateTime @default(now()) @map("created_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id])

  @@map("survey_market_information")
}

model SurveyFeelings {
  id                      Int      @id @default(autoincrement())
  candidateUserId         Int?     @unique @map("candidate_user_id")
  professionalAchievement Int      @map("professional_achievement")
  motivation              String   @map("motivation")
  createdAt               DateTime @default(now()) @map("created_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id], onDelete: Cascade)

  @@map("tb_survey_feelings")
}

model SurveyProfessionalSituation {
  id              Int      @id @default(autoincrement())
  situation       String
  ocupationArea   String?  @map("ocuppation_area")
  objectives      String?
  candidateUserId Int?     @unique() @map("candidate_user_id")
  createdAt       DateTime @default(now()) @map("created_at")

  CandidateUser CandidateUser? @relation(fields: [candidateUserId], references: [id])

  @@map("survey_professional_situation")
}
